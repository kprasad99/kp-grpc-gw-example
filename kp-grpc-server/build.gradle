plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${dependencyManagementVersion}"
	id "com.google.protobuf" version "${protobufPluginVersion}"
}

group = 'io.github.kprasad99'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

// ext.prjParentDir = project.projectDir.getParentFile().toString()

// task copyExtResources(type: Copy) {
//     from prjParentDir
//     include "proto"
//     into "${projectDir}/src/main"
// }

// processResources.dependsOn copyExtResources

// sourceSets {
//     main {
// 		proto {
// 			srcDir "src/main/proto"
// 		}
//        java {
//            srcDirs += ["${projectDir}/build/generated/source/proto/main/grpc"]
//            srcDirs += ["${projectDir}/build/generated/source/proto/main/java"]
//        }
//        resources {
// 			srcDirs += ["${projectDir}/src/main/proto"]
//        }
//     }
// }

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
	implementation "io.github.lognet:grpc-spring-boot-starter:${lognetGrpcVersion}"
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.flywaydb:flyway-core'
	
	//implementation "org.springframework.boot:spring-boot-starter-log4j2"
    //modules {
    //    module("org.springframework.boot:spring-boot-starter-logging") {
    //        replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
    //    }
    //}
    
	//implementation 'io.sentry:sentry-spring-boot-starter-jakarta'
	// breave based instrumentation
	//implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
	//implementation 'io.micrometer:micrometer-tracing-bridge-brave'

	// otel based instrumentation
	// implementation 'io.micrometer:micrometer-registry-otlp'
	implementation 'io.micrometer:micrometer-tracing-bridge-otel'
	implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
	runtimeOnly "io.opentelemetry.instrumentation:opentelemetry-logback-mdc-1.0:${otelInstrumentationVersion}"
	// hikaricp exposes only metrics
	// runtimeOnly "io.opentelemetry.instrumentation:opentelemetry-hikaricp-3.0:${otelInstrumentationVersion}"
	implementation "io.opentelemetry.instrumentation:opentelemetry-grpc-1.6:${otelInstrumentationVersion}"
	implementation "io.opentelemetry.instrumentation:opentelemetry-jdbc:${otelInstrumentationVersion}"
	
	
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "no.entur.mapstruct.spi:protobuf-spi-impl:${mapstructProtobufVersion}"


	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufJavaVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

tasks.named('test') {
	useJUnitPlatform()
}
